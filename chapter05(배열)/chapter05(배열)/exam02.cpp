//배열에 대한 실습-2
//배열의 크기(길이, length)는 []안에 0을 초과하는 정수값이 들어가야한다. 몇개의 배열방을 만들 것인지 지정을 해야한다. 정적 배열의 경우 지정을 해야 하다보니 인덱스가 초과가 되어버리면
//저장할 방도 없는데 데이터를 저장을 할 수 없는 문제가 발생되며, 반대로 저장할 데이터가 적게 들어오면 메모리의 낭비를 가져오게 된다. 정적 배열의 문제였다. 배열을 선언할 때, []에 변수 이름이나
//음수, 실수값을 지정하면 바로 컴파일 에러가 발생한다.

//#include <iostream>
//#define LENGTH 3
//using namespace std;
//
//int main(void) {
//
//	int length = 5;
//	//int arr[length]; //변수가 배열의 크기로 들어가니 컴파일 에러가 발생 언제 바뀔지 모르니까...
//	//int score[0] = { 0 }; //정수형 상수 0을 크기로 넣으니 컴파일 에러가 발생
//	//음수도 똑같다...
//
//	//float score[5.77] = { 0.0f };	//실수값이 배열의 크기로 들어갈 수 없다.
//	//double score[10] = {0.0}; //배열의 크기로 정수형 상수값이 들어갔기 떄문에 컴파일에러가 발생하지 않는다.
//	
//	//배열은 메모리에 연속된 공간을 할당해준다. 배열의 크기는 0을 초과한 정수형 상수값을 허용하는 것을 이미 봤다. 그러나 현업에서는 #define 기호(매크로)상수로 값을 치환하여 정적 배열의 크기를 지정하여
//	//사용하는 경우가 대부분이다. 그 이유는 배열의 크기가 변동이 온다면 매크로 상수의 값만 변경시켜주면 프로그램 유지, 보수에 편리하다.
//	//int score[LENGTH] = { 0 }; //매크로 상수로 배열의 크기를 지정하니 에러가 미발생 된다.
//	int jumsu[] = { 10, 20, 30, 40, 50 }; //[]크기를 주지않고 초기화를 하면 컴파일러가 알아서 크기를 잡아준다.
//	//아래 코드는 배열의 크기가 3인데 인덱스 3인 방은 존재하지 않는다. 40을 대입하니 에ㅔ러가 발생한다.
//	//int arr[LENGTH] = { 10, 20, 30, 40 };
//
//	//특정 인덱스만 초기화를 하게 되면, 나머지 방의 값들은 역시 쓰레기 값으로 채워진다.
//	int min[LENGTH];
//	min[0] = 50;
//	for (int i : min) {
//		cout << i << " ";
//	}
//	cout << endl;
//
//	//for (int i = 0; i < LENGTH; i++) {
//	//	cout << score[i] << " ";
//	//}
//	//cout << endl;
//	//cout << "배열의 바이트 수 : " << sizeof(score) << endl;
//	////범위 기반 for 루프
//	//for (int i : score) {
//	//	cout << i << " ";
//	//}
//	//cout << endl;
//
//	cout << "jumsu배열의 주소값 : " << jumsu << endl;
//
//	for (int i = 0; i < sizeof(jumsu) / sizeof(int); i++)
//	{
//		cout << jumsu[i] << " ";
//	}
//	cout << endl;
//	//범위 기반 for 루프는 jumsu라는 공간에서 1개씩 값을 int i변수에 복사되어진다.
//	for (int i : jumsu) {
//		cout << i << " ";
//	}
//
//	//배열을 사용할 때 주의사항
//	// 1. 배열의 인덱스는 항상 0부터 시작
//	// 2. 배열명은 곧 주소이다. (배열[0]의 주소값과 동일)
//	// 3. 배열의 선언과 함께 초기화를 할 경우 배열의 크기는 생략 가능하다.(권고사항은 아니다.)
//	// 4. 배열의 크기보다 큰 인덱스에 값을 저장 및 출력을 하면 에러가 발생한다.(방이 없다.)
//	// 5. 배열의 특정 인덱스만 값을 초기화하면 다른 나머지 방들은 전부 쓰레기 값으로 채워진다.
//	return 0;
//}